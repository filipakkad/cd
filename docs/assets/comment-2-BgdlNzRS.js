const t="Iâ€™m very familiar with all the technologies mentioned. I've worked extensively with the `TanStack` family of tools, including `React` and `TypeScript`, and Iâ€™ve used `TanStack Query` in multiple projects, often combining it with the `CQRS` pattern to handle complex data flows seamlessly.\n\n`TypeScript` has been my go-to for building maintainable and scalable applications for years now. And yesâ€”I'm serious about it: no `any` types sneaking into my code! ðŸ’» Iâ€™m confident that my experience will allow me to contribute meaningfully to both the team and the product, helping push the boundaries of what's possible.\n\nHereâ€™s a glimpse of the other technologies I've worked with:\n- [`Node.js`](https://nodejs.org/) â€“ backend services and API development\n- [`Django`](https://www.djangoproject.com/) & [`FastAPI`](https://fastapi.tiangolo.com/) â€“ building robust, scalable web applications\n- [`Single-spa`](https://single-spa.js.org/) â€“ for micro-frontends\n- [`Astro`](https://astro.build/) & [`Gatsby`](https://www.gatsbyjs.com/) â€“ static site generation\n- [`TailwindCSS`](https://tailwindcss.com/) & [`Styled Components`](https://styled-components.com/) â€“ design systems and component styling\n- [`React Hook Form`](https://react-hook-form.com/) & [`Formik`](https://formik.org/) â€“ form handling made easy\n- [All `TanStack` tools](https://tanstack.com/) â€“ data management and routing, top-notch stuff\n- [`R` and `Shiny`](https://shiny.rstudio.com/) â€“ for data analytics and interactive dashboards\n- [`Docker`](https://www.docker.com/) â€“ containerization and deployment\n- [`Vite`](https://vitejs.dev/) â€“ lightning-fast builds and hot reloading\n- [`ESLint`](https://eslint.org/) â€“ keeping the codebase clean and maintainable";export{t as default};
